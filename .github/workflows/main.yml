name: Workflowwow
run-name: ${{ github.actor }} is testing out GitHub Actions üöÄ
on: [push]
jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Service'
        uses: actions/checkout@v4
      - name: 'Setup python'
        uses: actions/setup-python@v5
      - name: 'install all depedencies'
        run: pip install --quiet --upgrade --requirement requirements.txt
      - name: 'Lintage du code 1'
        run: flake8 --ignore=E501,E231 *.py
      - name: 'Lintage du code 2'
        run: pylint --errors-only --disable=C0301 --disable=C0326 *.py
      - name: 'Test unitaire'
        run: python -m unittest --verbose --failfast
      - name: 'docker build'
        run: docker build -t $(SCOPE)/$(APP):$(TAG) .
  build:  # Nom du job
    needs: [Lint]  # D√©pend du job `Lint`
    runs-on: ubuntu-latest  # S'ex√©cute sur la derni√®re version d'Ubuntu
    permissions:  # Permissions n√©cessaires
      packages: write  # Autorisation d'√©crire aux packages

    # √âtapes du job
    steps:
      - name: code checkout  # R√©cup√®re le code source
        uses: actions/checkout@v4  # Utilise l'action GitHub pour le checkout

      - name: setup Buildx  # Configure Docker Buildx
        uses: docker/setup-buildx-action@v3  # Utilise l'action Buildx

      - name: login to GitHub Package Registry  # Connexion √† GitHub Container Registry
        uses: docker/login-action@v3  # Utilise l'action de login Docker
        with:  # Avec ces param√®tres
          registry: ghcr.io  # URL du registre
          username: ${{ github.actor }}  # Nom d'utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }}  # `GITHUB_TOKEN` pour l'authentification

      - name: get metadata  # R√©cup√®re les m√©tadonn√©es pour Docker
        id: metadata  # ID pour cette √©tape
        uses: docker/metadata-action@v5  # Utilise l'action de m√©tadonn√©es
        with:
          images: ghcr.io/${{ github.repository }}/  # Utilise le nom dur repository
          
      - name: Get current date # get the date of the build
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d--%M-%S')"

      - name: build and push  # Construit et pousse l'image
        uses: docker/build-push-action@v5  # Utilise l'action de build et push Docker
        with:  # Avec ces param√®tres
          push: true  # Pousse l'image
          tags: flask-docker:${{ steps.date.outputs.date }}  # Tags pour l'image
          context: .  # Contexte pour la construction Docker
          cache-from: type=gha  # Utilise le cache GitHub Actions
          cache-to: type=gha,mode=max  # Enregistre le cache pour les utilisations futures
